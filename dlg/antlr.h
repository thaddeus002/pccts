/*
 * SOFTWARE RIGHTS
 *
 * We reserve no LEGAL rights to the Purdue Compiler Construction Tool
 * Set (PCCTS) -- PCCTS is in the public domain.  An individual or
 * company may do whatever they wish with source code distributed with
 * PCCTS or the code generated by PCCTS, including the incorporation of
 * PCCTS, or its output, into commerical software.
 *
 * We encourage users to develop software with PCCTS.  However, we do ask
 * that credit is given to us for developing PCCTS.  By "credit",
 * we mean that if you incorporate our source code into one of your
 * programs (commercial product, research project, or otherwise) that you
 * acknowledge this fact somewhere in the documentation, research report,
 * etc...  If you like PCCTS and have developed a nice tool with the
 * output, please mention that you developed it using PCCTS.  In
 * addition, we ask that this header remain intact in our source code.
 * As long as these guidelines are kept, we expect to continue enhancing
 * this system and expect to make other tools available as they are
 * completed.
 *
 * ANTLR 1.33
 * Terence Parr
 * Parr Research Corporation
 * with Purdue University and AHPCRC, University of Minnesota
 * 1989-2000
 */

/**
 * \file antlr.h
 *
 * Define all of the stack setup and manipulation of $i, #i variables.
 *
 *  Notes:
 *    The type 'Attrib' must be defined before entry into this .h file.
 */


#ifndef ANTLR_H
#define ANTLR_H

#include <string.h>
#include "dlg_p.h" // for Attrib
#include "dlg_a.h"

typedef int ANTLRTokenType;
typedef unsigned char SetWordType;

typedef char ANTLRChar;

            /* G u e s s  S t u f f */


/* can make this a power of 2 for more efficient lookup */

#ifndef ZZLEXBUFSIZE
#define ZZLEXBUFSIZE  8000 /* MR22 raise from 2k to 8k */
#endif

#define zzOvfChk                            \
    if ( zzasp <= 0 )                                           \
    {                                                           \
        fprintf(stderr, zzStackOvfMsg, __FILE__, __LINE__);   \
        exit(1);                                               \
    }

#define ZZA_STACKSIZE 400

#define zzfailed_pred(_p,_hasuseraction,_useraction) \
    zzfailed_pred_action(_p,_hasuseraction,_useraction);

/*  MR23            Provide more control over failed predicate action
                    without any need for user to worry about guessing internals.
                    _hasuseraction == 0 => no user specified error action
                    _hasuseraction == 1 => user specified error action
*/

#define zzfailed_pred_action(_p,_hasuseraction,_useraction) \
    if (_hasuseraction) { _useraction } \
    else { fprintf(stderr, "semantic error; failed predicate: '%s'\n",_p); }


            /* S t a t e  S t u f f */

#define zzNON_GUESS_MODE

typedef struct _zzantlr_state {
      int asp;
      int ast_sp;
      int token;
      char text[ZZLEXBUFSIZE];
} zzantlr_state;

extern int zzLexErrCount;

#define ANTLR(st, f)  zzbufsize = ZZLEXBUFSIZE; \
            {static char zztoktext[ZZLEXBUFSIZE]; \
            zzlextext = zztoktext; zzrdstream( f ); zzgettok();}; \
            {                                            \
              int zztasp1 = zzasp -1; \
              st;  \
              zzasp=zztasp1 + 1;             \
            }


          /* A r g u m e n t  A c c e s s */

#define zzaRet      (*zzaRetPtr)
#define zzMakeAttr    { zzNON_GUESS_MODE {zzOvfChk; --zzasp; zzcr_attr(&(zzaStack[zzasp]),zztoken,zzlextext);}}
#define zzMake0     { zzOvfChk; --zzasp;}
#define zzREL(t)    zzasp=(t);    /* Restore state of stack */

#define zzCONSUME zzgettok();

#ifndef zzchar_t
#define zzchar_t char
#endif


        /* E x t e r n  D e f s */

extern int zzset_deg(SetWordType *);

        /* G l o b a l  V a r i a b l e s */

/* Define a parser; user should do a "#parser myname" in their grammar file */
/*extern struct pccts_parser zzparser;*/

int zztoken;
extern char zzStackOvfMsg[];
extern int zzasp;
extern Attrib zzaStack[];

#endif
