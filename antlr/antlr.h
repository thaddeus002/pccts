/*
 * SOFTWARE RIGHTS
 *
 * We reserve no LEGAL rights to the Purdue Compiler Construction Tool
 * Set (PCCTS) -- PCCTS is in the public domain.  An individual or
 * company may do whatever they wish with source code distributed with
 * PCCTS or the code generated by PCCTS, including the incorporation of
 * PCCTS, or its output, into commerical software.
 *
 * We encourage users to develop software with PCCTS.  However, we do ask
 * that credit is given to us for developing PCCTS.  By "credit",
 * we mean that if you incorporate our source code into one of your
 * programs (commercial product, research project, or otherwise) that you
 * acknowledge this fact somewhere in the documentation, research report,
 * etc...  If you like PCCTS and have developed a nice tool with the
 * output, please mention that you developed it using PCCTS.  In
 * addition, we ask that this header remain intact in our source code.
 * As long as these guidelines are kept, we expect to continue enhancing
 * this system and expect to make other tools available as they are
 * completed.
 *
 * ANTLR 1.33
 * Terence Parr
 * Parr Research Corporation
 * with Purdue University and AHPCRC, University of Minnesota
 * 1989-2000
 */

/**
 * \file antlr.h
 *
 * Define all of the stack setup and manipulation of $i, #i variables.
 */


#ifndef ANTLR_H
#define ANTLR_H

#include <string.h>
#include "syn.h" // for Graph


typedef int ANTLRTokenType;
typedef unsigned char SetWordType;
typedef char ANTLRChar;
typedef Graph Attrib;

void grammar();

            /* G u e s s  S t u f f */


/* can make this a power of 2 for more efficient lookup */
/* Allow user to override default ZZLEXBUFSIZE  */
#ifndef ZZLEXBUFSIZE
#define ZZLEXBUFSIZE 32000
#endif


#define zzOvfChk                            \
    if ( zzasp <= 0 )                                           \
    {                                                           \
        fprintf(stderr, zzStackOvfMsg, __FILE__, __LINE__);   \
        exit(1);                                               \
    }


#ifndef zzfailed_pred
#define zzfailed_pred(_p,_hasuseraction,_useraction) \
    zzfailed_pred_action(_p,_hasuseraction,_useraction);
#endif

/*  MR23            Provide more control over failed predicate action
                    without any need for user to worry about guessing internals.
                    _hasuseraction == 0 => no user specified error action
                    _hasuseraction == 1 => user specified error action
*/

#ifndef zzfailed_pred_action
#define zzfailed_pred_action(_p,_hasuseraction,_useraction) \
    if (_hasuseraction) { _useraction } \
    else { fprintf(stderr, "semantic error; failed predicate: '%s'\n",_p); }
#endif

            /* S t a t e  S t u f f */

#define zzGUESS_BLOCK
#define zzGUESS
#define zzGUESS_FAIL
#define zzGUESS_DONE
#define zzNON_GUESS_MODE
#define zzGuessData

typedef struct _zzantlr_state {
      int asp;
      int ast_sp;
      int token;
      char text[ZZLEXBUFSIZE];
#ifdef zzTRACE_RULES
      int     traceOptionValue;
      int     traceGuessOptionValue;
      char    *traceCurrentRuleName;
      int     traceDepth;
#endif

} zzantlr_state;

#ifdef zzTRACE_RULES
extern int  zzTraceOptionValueDefault;
extern int  zzTraceOptionValue;
extern int  zzTraceGuessOptionValue;
extern char *zzTraceCurrentRuleName;
extern int  zzTraceDepth;
#endif

extern int zzGuessSeq;
extern int zzSyntaxErrCount;
extern int zzLexErrCount;

                 /* I n f i n i t e  L o o k a h e a d */


#define zzPrimeLookAhead  zzgettok()

#define zzenterANTLR(f)             \
    {static char zztoktext[ZZLEXBUFSIZE]; \
    zzlextext = zztoktext; zzrdstream( f ); zzPrimeLookAhead;}

#define zzleaveANTLR(f)



/* MR19 Paul D. Smith (psmith@baynetworks.com)
   Need to adjust AST stack pointer at exit.
   Referenced in ANTLRx macros.
*/

#ifdef GENAST
#define ZZAST_ADJUST ++zzast_sp;
#else
#define ZZAST_ADJUST
#endif

#define ANTLR(st, f)  zzbufsize = ZZLEXBUFSIZE; \
            zzenterANTLR(f);      \
            {                                            \
              zzBLOCK(zztasp1);                          \
              st;                                        \
              zzEXIT_ANTLR(zztasp1 + 1);                 \
            }

#define zztext    zzlextext


          /* A r g u m e n t  A c c e s s */

#define zzaCur      (zzaStack[zzasp])
#define zzaRet      (*zzaRetPtr)
#define zzaArg(v,n)   zzaStack[v-n]
#define zzMakeAttr    { zzNON_GUESS_MODE {zzOvfChk; --zzasp;}}
#ifdef zzdef0
#define zzMake0     { zzOvfChk; --zzasp; zzdef0(&(zzaStack[zzasp]));}
#else
#define zzMake0     { zzOvfChk; --zzasp;}
#endif
#define zzaPush(_v)   { zzOvfChk; zzaStack[--zzasp] = _v;}
#ifndef zzd_attr
#define zzREL(t)    zzasp=(t);    /* Restore state of stack */
#else
#define zzREL(t)    for (; zzasp<(t); zzasp++)        \
            { zzd_attr(&(zzaStack[zzasp])); }
#endif


#define zzsetmatch(_es,_tokclassErrset)           \
  if ( !_zzsetmatch(_es, &zzBadText, &zzMissText, &zzMissTok, &zzBadTok, &zzMissSet, _tokclassErrset) ) goto fail;

#define zzsetmatch_wsig(_es, handler)   \
  if ( !_zzsetmatch_wsig(_es) ) {_signal=MismatchedToken; goto handler;}

extern int _zzsetmatch(SetWordType *, char **, char **, int *, int *, SetWordType **, SetWordType *);
extern int _zzsetmatch_wsig(SetWordType *);

#define zzmatch(_t)             \
  if ( !_zzmatch(_t, &zzBadText, &zzMissText, &zzMissTok, &zzBadTok, &zzMissSet) ) goto fail;

#define zzmatch_wsig(_t,handler)      \
  if ( !_zzmatch_wsig(_t) ) {_signal=MismatchedToken; goto handler;}

extern int _zzmatch(int, char **, char **, int *, int *, SetWordType **);
extern int _zzmatch_wsig(int);

#define zzmatch_wdfltsig(_t,_f)     \
  if ( !_zzmatch_wdfltsig(_t,_f) ) _signal=MismatchedToken;
#define zzsetmatch_wdfltsig(tw,tt,wf)   \
  if ( !_zzsetmatch_wdfltsig(tw,tt,wf) ) _signal=MismatchedToken;

extern int _zzmatch_wdfltsig(int, SetWordType *);
extern int _zzsetmatch_wdfltsig(SetWordType *tokensWanted,
                int tokenTypeOfSet,
                SetWordType *whatFollows);

#ifdef GENAST
#define zzRULE    Attrib *zzaRetPtr = &(zzaStack[zzasp-1]); \
          SetWordType *zzMissSet=NULL; int zzMissTok=0;   \
          int zzBadTok=0; char *zzBadText="";   \
          int zzErrk=1,zzpf=0;          \
                    zzTRACEdata \
          char *zzMissText=""; zzASTVars
#else
#define zzRULE    Attrib *zzaRetPtr = &(zzaStack[zzasp-1]); \
          int zzBadTok=0; char *zzBadText="";   \
          int zzErrk=1,zzpf=0;                \
                    zzTRACEdata \
          SetWordType *zzMissSet=NULL; int zzMissTok=0; char *zzMissText=""
#endif

#ifdef GENAST
#define zzBLOCK(i)  int i = zzasp - 1; int zztsp = zzast_sp
#define zzEXIT(i) zzREL(i); zzastREL; zzNON_GUESS_MODE { zzastPush(*_root); }
#define zzEXIT_ANTLR(i) zzREL(i); zzastREL /* [i_a] added as we want this for the ANTLRx() macros */
#define zzLOOP(i) zzREL(i); zzastREL
#else
#define zzBLOCK(i)  int i = zzasp - 1
#define zzEXIT(i) zzREL(i)
#define zzEXIT_ANTLR(i) zzREL(i)           /* [i_a] added as we want this for the ANTLRx() macros */
#define zzLOOP(i) zzREL(i)
#endif

#define zzCONSUME zzgettok();
#define NLA     zztoken
#define NLATEXT   zztext
#define LA(i)       zztoken
#define LATEXT(i)   zztext


           /* S t a n d a r d  S i g n a l s */

#define NoSignal      0
#define MismatchedToken   1
#define NoViableAlt     2
#define NoSemViableAlt    3

/* MR7  Allow more control over signalling                                  */
/*        by adding "Unwind" and "zzsetSignal"                              */

#define Unwind              4
#define zzsetSignal(newValue) *_retsignal=_signal=(newValue)
#define zzsuppressSignal *_retsignal=_signal=0
#define zzexportSignal    *_retsignal=_signal

           /* F u n c t i o n  T r a c i n g */

#ifndef zzTRACE_RULES
#define zzTRACEdata
#else
#ifndef zzTRACEdata
#define zzTRACEdata     ANTLRChar *zzTracePrevRuleName = NULL;
#endif
#endif

#ifndef zzTRACEIN
#define zzTRACEIN(r)  zzTracePrevRuleName=zzTraceCurrentRuleName;zzTraceIn(r);
#endif
#ifndef zzTRACEOUT
#define zzTRACEOUT(r) zzTraceOut(r);zzTraceCurrentRuleName=zzTracePrevRuleName;
#endif

/* MR19 zzchar_t additions */

#ifndef zzchar_t
#ifdef ZZWCHAR_T
#define zzchar_t wchar_t
#else
#define zzchar_t char
#endif
#endif


        /* E x t e r n  D e f s */

extern int zzset_deg(SetWordType *);
extern void zzedecode(SetWordType *);
extern void zzresynch(SetWordType *, SetWordType);
extern void zzsave_antlr_state(zzantlr_state *);
extern void zzrestore_antlr_state(zzantlr_state *);
extern void zzfill_inf_look(void);
extern void zzconsumeUntil(SetWordType *st);                         /* MR7 */
extern void zzconsumeUntilToken(int t);                              /* MR7 */
extern void zzTraceIn(char * ruleName);                              /* MR10 */
extern void zzTraceOut(char * ruleName);                             /* MR10 */
extern int  zzTraceOption(int delta);                                /* MR10 */
extern int  zzTraceGuessOption(int delta);                           /* MR10 */
extern void zzTraceReset(void);                                      /* MR10 */
extern void zzTraceGuessFail(void);                                  /* MR10 */
#ifdef EXCEPTION_HANDLING
extern void zzdflthandlers(int, int *);
#endif

        /* G l o b a l  V a r i a b l e s */

/* Define a parser; user should do a "#parser myname" in their grammar file */

extern int zztoken;
extern char zzStackOvfMsg[];
extern int zzasp;
extern Attrib zzaStack[];

#endif
