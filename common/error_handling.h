/*
 * SOFTWARE RIGHTS
 *
 * We reserve no LEGAL rights to the Purdue Compiler Construction Tool
 * Set (PCCTS) -- PCCTS is in the public domain.  An individual or
 * company may do whatever they wish with source code distributed with
 * PCCTS or the code generated by PCCTS, including the incorporation of
 * PCCTS, or its output, into commerical software.
 *
 * We encourage users to develop software with PCCTS.  However, we do ask
 * that credit is given to us for developing PCCTS.  By "credit",
 * we mean that if you incorporate our source code into one of your
 * programs (commercial product, research project, or otherwise) that you
 * acknowledge this fact somewhere in the documentation, research report,
 * etc...  If you like PCCTS and have developed a nice tool with the
 * output, please mention that you developed it using PCCTS.  In
 * addition, we ask that this header remain intact in our source code.
 * As long as these guidelines are kept, we expect to continue enhancing
 * this system and expect to make other tools available as they are
 * completed.
 *
 * ANTLR 1.33
 * Terence Parr
 * Parr Research Corporation
 * with Purdue University and AHPCRC, University of Minnesota
 * 1989-2000
 */

/**
 * \file error_handling.h
 *
 * Standard error handling mechanism
 *
 * Has grown to hold all kinds of stuff (error_handling.h is increasingly misnamed)
 */


#ifndef ERR_H
#define ERR_H

#include <stdlib.h>
#include <assert.h>
#include <string.h>
#include <stdarg.h>


#define BSETWORDSIZE 8

/* This is not put into the global pccts_parser structure because it is
 * hidden and does not need to be saved during a "save state" operation
 */
/* maximum of 32 bits/unsigned int and must be 8 bits/byte */
static SetWordType bitmask[] = {
  0x00000001, 0x00000002, 0x00000004, 0x00000008,
  0x00000010, 0x00000020, 0x00000040, 0x00000080
};

void zzresynch(SetWordType *wd,SetWordType mask)
{
  static int consumed = 1;

  /* if you enter here without having consumed a token from last resynch
   * force a token consumption.
   */
  if ( !consumed ) {zzgettok(); consumed=1; return;}

  /* if current token is in resynch set, we've got what we wanted */
  if ( wd[zztoken]&mask || zztoken == zzEOF_TOKEN ) {consumed=0; return;}

  /* scan until we find something in the resynch set */
  while ( !(wd[zztoken]&mask) && zztoken != zzEOF_TOKEN ) {zzgettok();}
  consumed=1;
}

/** is b an element of set p? */
static int zzset_el(unsigned b, SetWordType *p)
{
  return p[b/BSETWORDSIZE] & bitmask[b%BSETWORDSIZE];
}


/* input looks like:
 *    zzFAIL(k, e1, e2, ...,&zzMissSet,&zzMissText,&zzBadTok,&zzBadText)
 * where the zzMiss stuff is set here to the token that did not match
 * (and which set wasn't it a member of).
 */
void zzFAIL(int k, ...)
{
  static char text[ZZLEXBUFSIZE+1];
  SetWordType *f[1];
  SetWordType **miss_set;
  char **miss_text;
  int *bad_tok;
  char **bad_text;
  int *err_k;
  int i;
  va_list ap;
  va_start(ap, k);
  assert(k <= sizeof(f)/sizeof(f[0]));    /* MR20 G. Hobbelt */
  text[0] = '\0';
  for (i=1; i<=k; i++)  /* collect all lookahead sets */
  {
    f[i-1] = va_arg(ap, SetWordType *);
  }
  for (i=1; i<=k; i++)  /* look for offending token */
  {
    if ( i>1 ) strcat(text, " ");
    strcat(text, zzlextext);
    if ( !zzset_el((unsigned)zztoken, f[i-1]) ) break;
  }
  miss_set = va_arg(ap, SetWordType **);
  miss_text = va_arg(ap, char **);
  bad_tok = va_arg(ap, int *);
  bad_text = va_arg(ap, char **);
  err_k = va_arg(ap, int *);
  if ( i>k )
  {
    /* bad; lookahead is permutation that cannot be matched,
     * but, the ith token of lookahead is valid at the ith position
     * (The old LL sub 1 (k) versus LL(k) parsing technique)
     */
    *miss_set = NULL;
    *miss_text = zzlextext;
    *bad_tok = zztoken;
    *bad_text = zzlextext;
    *err_k = k;
    return;
  }
/*  fprintf(stderr, "%s not in %dth set\n", zztokens[zztoken], i);*/
  *miss_set = f[i-1];
  *miss_text = text;
  *bad_tok = zztoken;
  *bad_text = zzlextext;
  if ( i==1 ) *err_k = 1;
  else *err_k = k;
}



#endif /* ERR_H */
